#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def product = "ccd"
def component = "case-document-am-api"

GradleBuilder builder = new GradleBuilder(this, product)

// Variables to switch pipeline logic and wiring per type of build
def definitionStoreDevelopPr = "PR-575"  // This doesn't change frequently, but when it does, only change this value.
def dataStoreApiDevelopPr    = "PR-1400" // This doesn't change frequently, but when it does, only change this value.
def prsToUseAat              = "PR-148" // Set this value to a PR number, or add it as a comma-separated value, if it's to follow CI/CD.

def secrets = [
    'ccd-${env}': [
        secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
        secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
        secret('ccd-importer-autotest-email', 'CCD_IMPORT_AUTOTEST_EMAIL'),
        secret('ccd-importer-autotest-password', 'CCD_IMPORT_AUTOTEST_PASSWORD'),
        secret('ccd-befta-caseworker-2-solicitor-1-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_1_PWD'),
        secret('ccd-befta-caseworker-2-solicitor-2-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_2_PWD'),
        secret('ccd-befta-caseworker-2-solicitor-3-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_3_PWD'),
        secret('ccd-befta-caseworker-1-pwd', 'CCD_BEFTA_CASEWORKER_1_PWD'),
        secret('ccd-befta-caseworker-2-pwd', 'CCD_BEFTA_CASEWORKER_2_PWD'),
        secret('ccd-befta-caseworker-3-pwd', 'CCD_BEFTA_CASEWORKER_3_PWD'),
        secret('ccd-befta-citizen-2-pwd', 'CCD_BEFTA_CITIZEN_2_PWD'),
        secret('ccd-befta-citizen-3-pwd', 'CCD_BEFTA_CITIZEN_3_PWD'),
        secret('ccd-befta-solicitor-3-pwd', 'CCD_BEFTA_SOLICITOR_3_PWD'),

        secret('ccd-api-gateway-oauth2-client-secret', 'OAUTH2_CLIENT_SECRET')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET'),
        secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET_OF_CCD_DATA'),
        secret('microservicekey-bulk-scan-processor', 'BEFTA_S2S_CLIENT_SECRET_OF_BULK_SCAN_PROCESSOR'),
        secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Vars needed for functional and smoke tests run against AKS

// Assume a feature build branched off 'develop', with dependencies develop-to-develop.
env.DEFINITION_STORE_HOST = "http://ccd-definition-store-api-${definitionStoreDevelopPr}.service.core-compute-preview.internal".toLowerCase()
env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-${dataStoreApiDevelopPr}.service.core-compute-preview.internal".toLowerCase()

env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.OAUTH2_CLIENT_ID = "ccd_gateway"
env.OAUTH2_REDIRECT_URI = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.DM_STORE_BASE_URL = "http://dm-store-aat.service.core-compute-aat.internal"

env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.BEFTA_S2S_CLIENT_ID_OF_CCD_DATA = "ccd_data"
env.BEFTA_S2S_CLIENT_ID_OF_XUI_WEBAPP = "xui_webapp"
env.BEFTA_S2S_CLIENT_ID_OF_BULK_SCAN_PROCESSOR = "bulk_scan_processor"

env.BEFTA_RESPONSE_HEADER_CHECK_POLICY = "JUST_WARN"

withPipeline("java", product, component) {

  after('test') {
      builder.gradle('integration')
    }

  // Check if the build should be wired to an environment higher than 'preview'.
  if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'demo' || env.BRANCH_NAME == 'perftest' || env.BRANCH_NAME == 'ithc' || prsToUseAat.toLowerCase().contains(env.BRANCH_NAME.toLowerCase())) {
      environmentOfDependencies = env.BRANCH_NAME
      // use aat environment for dependencies of master and CI/CD builds.
      if (env.BRANCH_NAME.startsWith("PR") || env.BRANCH_NAME == 'master') {
          environmentOfDependencies = "aat"
      }
      env.DEFINITION_STORE_HOST = "http://ccd-definition-store-api-${environmentOfDependencies}.service.core-compute-${environmentOfDependencies}.internal"
      env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-${environmentOfDependencies}.service.core-compute-${environmentOfDependencies}.internal"
  }
  enableSlackNotifications('#ccd-case-document-am-api-builds')

  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  disableLegacyDeployment()

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }
}
