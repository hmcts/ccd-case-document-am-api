plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.5'
  id 'info.solidsoft.pitest' version '1.5.0'
  id 'org.springframework.boot' version '3.0.13'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.0.0.4638'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
  id 'au.com.dius.pact' version '4.1.7'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '3.0.0'
}

apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'

ext {
  set('springCloudVersion', '2022.0.5')
  set('spring-framework.version', '6.0.21')
  set('spring-security.version', '6.0.8')
  set('log4j2.version', '2.17.1')
  set('jackson.version', '2.15.3')
  set('snakeyaml.version', '2.2')
}

def versions = [
  junit              : '5.6.2',
  lombok             : '1.18.20',
  reformLogging      : '6.0.1',
  serenity           : '3.7.0',
  restAssured        : '5.2.1',
  cucumber           : '5.5.0',
  tomcatEmbedded     : '10.1.25',
  pact_version       : '4.1.7',
]

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

pmd {
  toolVersion = '6.21.0'
  sourceSets = []
}

group = 'uk.gov.hmcts.reform.ccd.documentam'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

application {
  mainClass = 'uk.gov.hmcts.reform.ccd.documentam.Application'
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.0
      }
    }
  }
}

configurations {
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
  cucumberRuntime.extendsFrom(functionalRuntime)
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  doFirst {
    javaexec {
      main = "uk.gov.hmcts.ccd.documentam.befta.CaseDocumentAmBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = ['--plugin', "json:${rootDir}/target/cucumber.json",
              '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
              '--tags', 'not @Ignore',
              '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features/']
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Functional Tests/"
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Functional%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  serenity.outputDirectory = file("${projectDir}/integrationTest/site/reports")
  finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
  setClasspath(sourceSets.functionalTest.runtimeClasspath)
  include "uk/gov/hmcts/ccd/documentam/befta/**"
  useJUnitPlatform {
    includeTags 'smoke'
  }

  doLast {
    javaexec {
      mainClass = "uk.gov.hmcts.ccd.documentam.befta.CaseDocumentAmBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = ['--plugin', "json:${rootDir}/target/cucumber.json",
              '--plugin', "junit:${buildDir}/test-results/smoke/cucumber.xml",
              '--tags', '@Smoke',
              '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features']
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports.enabled = true
    generateCucumberReports {
      doLast{
        new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))
      }
    }
  }

  outputs.upToDateWhen { false }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

jacoco {
  toolVersion = "0.8.8"
}

pitest {
  pitestVersion = "1.4.9"
  testPlugin = "junit5"
  targetClasses = ['uk.gov.hmcts.reform.ccd.documentam.*']
  excludedClasses = ['uk.gov.hmcts.reform.ccd.documentam.Application','uk.gov.hmcts.reform.ccd.documentam.util.Swagger2SpringBoot', 'uk.gov.hmcts.reform.ccd.documentam.controller.advice.ErrorConstants', 'uk.gov.hmcts.reform.ccd.documentam.configuration.*','uk.gov.hmcts.reform.ccd.documentam.apihelper.*', 'uk.gov.hmcts.reform.ccd.documentam.model.enums.*', 'uk.gov.hmcts.reform.ccd.documentam.exception.*']
  threads = 15
  outputFormats = ['XML', 'HTML']
  timestampedReports = true
  mutationThreshold = 40
}

project.tasks['pitest'].group="verification"

sonarqube {
  properties {
    property "sonar.projectName", "ccd-case-document-am-api"
    property "sonar.projectKey", "ccd-case-document-am-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.junit.reportPaths", "${project.buildDir}/test-results/junit-platform"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

//https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
apply from: './gradle/suppress.gradle'
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://jitpack.io"
  }
}


dependencies {
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
  implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

  implementation group: 'org.springframework', name: 'spring-context-support'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.retry', name: 'spring-retry'
  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name: 'spring-security-rsa'

  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.7.0'

  implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
  implementation group: 'org.json', name: 'json', version: '20200518'

  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.1.3'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'

  implementation group: 'org.eclipse.jgit', name:  'org.eclipse.jgit', version: '6.6.1.202309021850-r';

  implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.6'
  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.6'

  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.0'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.1.4'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

  implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'

  implementation group: 'io.vavr', name: 'vavr', version: '0.10.4'

  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.21'
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.2.2'
  implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.6.8'

  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'


  implementation "org.apache.tomcat.embed:tomcat-embed-core:${versions.tomcatEmbedded}"
  implementation "org.apache.tomcat.embed:tomcat-embed-el:${versions.tomcatEmbedded}"
  implementation "org.apache.tomcat.embed:tomcat-embed-websocket:${versions.tomcatEmbedded}"
  implementation 'org.apache.groovy:groovy:4.0.22'
  implementation 'org.apache.groovy:groovy-json:4.0.22'
  implementation 'org.apache.groovy:groovy-xml:4.0.22'

  //CVE-2021-42500
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.6'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.6'

  // CVE-2021-28170
  implementation group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1'

  implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '2.6.4'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testImplementation group: 'net.javacrumbs.json-unit', name: 'json-unit-assertj', version: '2.27.0'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation (group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.13.0') {
    exclude group: 'io.rest-assured', module : 'rest-assured'
    exclude group: 'com.github.hmcts.befta-fw', module: 'befta-fw'
  }
  testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.7.11'
  testImplementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
  testImplementation group: 'org.assertj', name: 'assertj-vavr', version: '0.4.2'

  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.0.5'
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.0'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  contractTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  contractTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // The line below prevents the build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}

test {
  generateCucumberReports.enabled = false
}

bootJar {
  archiveFileName = 'ccd-case-document-am-api.jar'
  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

cucumberReports {
  outputDir = file("${projectDir}/target/cucumber")
  reports = files("${projectDir}/target/cucumber.json")
}

task reloadEnvSecrets {
  doFirst {
    def env = project.findProperty('env') ?: 'demo'
    if (project.file("./.${env}-remote-env").exists()) {
      project.file("./.${env}-remote-env").delete()
    }
  }
}

task runRemoteDemo(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  doFirst() {
    configRemoteRunTask(it, 'demo')
  }
}

void configRemoteRunTask(Task execTask, String env) {
  loadEnvSecrets(env)
  project.file("./.${env}-remote-env").readLines().each() {
    def index = it.indexOf("=")
    def key = it.substring(0, index)
    def value = it.substring(index + 1)
    execTask.environment(key, value)
  }
}

void loadEnvSecrets(String env) {
  def azCmd = ['az', 'keyvault', 'secret', 'show', '--vault-name', "ccd-${env}", '-o', 'tsv', '--query', 'value', '--name', 'case-document-am-api-remote-env']
  if (!project.file("./.${env}-remote-env").exists()) {
    new ByteArrayOutputStream().withStream { os ->
      exec {
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
          commandLine ['cmd', '/c'] + azCmd
        } else {
          commandLine azCmd
        }
        standardOutput = os
      }
      project.file("./.${env}-remote-env").write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
    }
  }
}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

task contract(type: Test) {
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/ccd/documentam/controller/endpoints/**"

}

task runProviderPactVerification(type: Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.provider.version', project.pactVersion
}

runProviderPactVerification.finalizedBy pactVerify

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}
