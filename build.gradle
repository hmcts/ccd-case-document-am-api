buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.11")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
//  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id "info.solidsoft.pitest" version '1.3.0'
  id 'org.springframework.boot' version '2.2.2.RELEASE'
  id 'org.owasp.dependencycheck' version '5.2.4'
  id 'com.github.ben-manes.versions' version '0.27.0'
  id 'org.sonarqube' version '2.8'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.15'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'

def versions = [
  junit           : '5.5.0',
  lombok             : '1.18.6',
  gradlePitest       : '1.3.0',
  pitest             : '1.4.2',
  reformHealthStarter: '0.0.5',
  reformLogging      : '5.1.0',
  reformS2sClient    : '3.0.0',
  serenity           : '2.0.23',
  sonarPitest        : '0.5',
  springBoot         : '2.1.4.RELEASE',
  springHystrix      : '2.1.1.RELEASE',
  springfoxSwagger   : '2.9.2',
  pact_version       : '3.5.24'
]

mainClassName = 'uk.gov.hmcts.reform.ccd.document.am.Application'
def jarName = 'ccd-case-document-am-api.jar'

group = 'uk.gov.hmcts.reform.ccd.document.am'
version = '0.0.1'

allprojects {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.0
      }
    }
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
  cucumberRuntime.extendsFrom(functionalRuntime)
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  doFirst {
    generateCucumberReports.enabled = true
    javaexec {
      main = "uk.gov.hmcts.reform.ccd.document.am.befta.DataStoreBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = ['--plugin', "json:${projectDir}/target/cucumber.json", '--tags', 'not @Ignore', '--glue',
              'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features']
    }
  }
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

//checkstyle {
//  maxWarnings = 0
//  toolVersion = '8.24'
//  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
//  configDir = new File(rootDir, 'config/checkstyle')
//}

//pmd {
//  toolVersion = "6.18.0"
//  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
//  reportsDir = file("$project.buildDir/reports/pmd")
//  // https://github.com/pmd/pmd/issues/876
//  ruleSets = []
//  ruleSetFiles = files("config/pmd/ruleset.xml")
//}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

jacoco {
  toolVersion = "0.8.1"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  targetClasses = ['uk.gov.hmcts.reform.ccd.document.am.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.ccd.document.am.*'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 5
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ccd-case-document-am-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ccd-case-document-am-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/ccd/document/am/**,"
    property "sonar.junit.reportPaths", "${project.buildDir}/test-results/junit-platform"
    property "sonar.projectName", "ccd-case-document-am-api"
    property "sonar.projectKey", "ccd-case-document-am-api"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
        }
      }
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFiles = ['config/owasp/suppressions.xml']
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}


dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
//  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
  //compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix
  compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: versions.springBoot
  compile group: 'org.springframework.cloud', name: 'spring-cloud-openfeign-core', version: '2.0.0.RELEASE'



  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealthStarter
  compile(group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4') {
    // TODO remove when auth-checker-lib upgrades its dependency to spring boot 2.0.x
    exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'

  }
  compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.4'



  compile 'org.projectlombok:lombok:1.18.6'
  compile group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
  compile group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'
  compile group: 'io.github.openfeign', name: 'feign-core', version: '9.1.0'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'javax.inject', name: 'javax.inject', version: '1'
  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.1.RELEASE'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testCompile group: 'org.pitest', name: 'pitest', version: versions.pitest
  testCompile 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
  testCompile 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile files('lib/befta-fw-1.0.9-SNAPSHOT.jar')

  //Added for functional test automation
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.1.RELEASE'
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.1.0'
  compile group: 'io.cucumber', name: 'cucumber-java', version: '5.0.0'
  testCompile group: 'io.cucumber', name: 'cucumber-junit', version: '5.0.0'
  testCompile 'io.github.openfeign:feign-jackson:9.7.0'

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  smokeTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

}

test {
  generateCucumberReports.enabled = false
  useJUnitPlatform()
  failFast = true
}


bootJar {
  archiveName = jarName

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

cucumberReports {
  outputDir = file("${projectDir}/target/cucumber")
  reports = files("${projectDir}/target/cucumber.json")
}
